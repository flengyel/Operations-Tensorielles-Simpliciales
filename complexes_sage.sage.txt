# complexes_sage.sage

R.<x00,x01,x02,x10,x11,x12,x20,x21,x22> = PolynomialRing(ZZ)

# Standard basis matrices for M_{3,3}
def standard_basis_matrix(n, i, j):
    m = Matrix(R, n, n)
    m[i, j] = 1
    return m

# Boundary operator in your notation
def boundary(A):
    return Matrix(R, 2, 2, [
        A[1, 1],
        A[1, 2] - A[0, 2] + A[0, 1],
        A[2, 1] - A[2, 0] + A[1, 0],
        A[1, 1]
    ])

# Assemble the boundary map as a linear operator B : M_{3,3} â†’ M_{2,2}
B = Matrix(R, 4, 9)
for i in range(3):
    for j in range(3):
        e = standard_basis_matrix(3, i, j)
        b = boundary(e)
        col = 3 * i + j
        for k in range(2):
            for l in range(2):
                row = 2 * k + l
                B[row, col] = b[k, l]

print("Boundary matrix B:")
print(B)

# Verify kernel condition: boundary(A) = 0
generic = Matrix(R, 3, 3, [x00, x01, x02, x10, x11, x12, x20, x21, x22])
boundary_generic = boundary(generic)
print("\nBoundary of generic matrix:")
print(boundary_generic)

# Flatten and check kernel
target = vector(R, [boundary_generic[i, j] for i in range(2) for j in range(2)])
print("\nTarget vector:", target)

# Solve B * v = target
v = vector(R, [x00, x01, x02, x10, x11, x12, x20, x21, x22])
print("\nEquation B * v == target:")
print(B * v == target)

# Compute kernel of B
print("\nKernel of boundary matrix B:")
print(B.right_kernel())
